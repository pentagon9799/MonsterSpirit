/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package iskandar;

import com.ish.monsterspirit.DBAksess;
import com.ish.monsterspirit.ReadTable;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import static java.awt.image.ImageObserver.ERROR;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author delimiter_
 */
public class Shop extends javax.swing.JPanel {

    /**
     * Creates new form Shop
     */
    //private Party_Data pd;
    private Object[][] item;
    
    private ResultSet partyList;
    private DBAksess dbakses = new DBAksess();
    private String[] selectedParty;
     private boolean status=false;
     public String userid;
     public int Money;
     private ReadTable v = new ReadTable();
    private MainMenu pl;
    private boolean x=true;
     
    public Shop(MainMenu pl) {
        initComponents();
        this.pl = pl;
        item=v.display_table2(table_shop,"select * from item");
        qty.setText("0");
        //getPartyList();
       
    }
    public Shop(MainMenu pl,String Uid, int money) {
        initComponents();
        this.pl = pl;
        this.userid=Uid;
        this.Money=money;
        item=v.display_table2(table_shop,"select * from item");
//        //money("select * from MainMenu where id="+this.UID+"",money);
//        //this.coinValue_label.setText(String.valueOf(money));
//        v.display_table(TabelGambarCharacter,"select * from list_party2 where user_id = "+String.valueOf(UID));
//        testing[0]=TabelGambarCharacter.getRowCount()-1;
//        setatribute(testing);
       
    }
     public void setusername(String s) {
    //   this.owned.setText(s);
    }
     
     public void setuserid(String s) 
     {
      userid=s;
      this.coba.setText(userid);
     }
//     public void setmoney(String i) {
//     
//      Money=Integer.parseInt(i);
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table_shop = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        descripsi = new javax.swing.JTextArea();
        Description = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        nama = new javax.swing.JLabel();
        prince = new javax.swing.JLabel();
        myqty = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        coba = new javax.swing.JLabel();
        coba1 = new javax.swing.JLabel();
        item_idd = new javax.swing.JLabel();
        coba3 = new javax.swing.JLabel();
        qty = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 0, 0));
        setPreferredSize(new java.awt.Dimension(955, 515));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table_shop.setBackground(new java.awt.Color(0, 0, 0));
        table_shop.setForeground(new java.awt.Color(255, 255, 255));
        table_shop.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_shop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_shopMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_shop);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 440, 380));

        descripsi.setBackground(new java.awt.Color(0, 0, 0));
        descripsi.setColumns(20);
        descripsi.setForeground(new java.awt.Color(255, 255, 255));
        descripsi.setRows(5);
        jScrollPane2.setViewportView(descripsi);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 230, 310, 140));

        Description.setForeground(new java.awt.Color(255, 255, 255));
        Description.setText("Description");
        add(Description, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 210, -1, -1));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nama");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 110, -1, -1));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Price");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 130, -1, 20));

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("QTY");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 180, -1, -1));

        nama.setForeground(new java.awt.Color(255, 255, 255));
        nama.setText("jLabel5");
        add(nama, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 110, -1, -1));

        prince.setForeground(new java.awt.Color(255, 255, 255));
        prince.setText("jLabel6");
        add(prince, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 130, -1, 20));

        myqty.setText("jLabel7");
        add(myqty, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, -1, -1));
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 10, 150, 160));

        coba.setText("jLabel6");
        add(coba, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, -1, -1));

        coba1.setText("user id");
        add(coba1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        item_idd.setText("jLabel6");
        add(item_idd, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, -1, -1));

        coba3.setText("item_id");
        add(coba3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, -1, -1));

        qty.setBackground(new java.awt.Color(0, 0, 0));
        qty.setForeground(new java.awt.Color(255, 255, 255));
        qty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        qty.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                qtyFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                qtyFocusLost(evt);
            }
        });
        qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qtyKeyTyped(evt);
            }
        });
        add(qty, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 170, 70, 30));

        jLabel6.setText("my qty item");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, 30));

        jButton2.setText("Buy");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 380, 110, 40));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("DASHBOARD SHOP");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/background/4@300px.png"))); // NOI18N
        jLabel7.setText("jLabel7");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(-6, -6, 970, 530));
    }// </editor-fold>//GEN-END:initComponents

    private void table_shopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_shopMouseClicked
         setItem(table_shop.getSelectedRow());
    }//GEN-LAST:event_table_shopMouseClicked
    

    
//    qty.addKeyListener(new KeyAdapter() {
//         public void keyPressed(KeyEvent ke) {
//            String value = qty.getText();
//            int l = value.length();
//            if (ke.getKeyChar() >= '0' && ke.getKeyChar() <= '9') 
//            {
//               qty.setEditable(true);
//               //JOptionPane.showMessageDialog(null, "Data berhasil di input");
//            } else {
//               qty.setEditable(false);
//               JOptionPane.showMessageDialog(null, "* Enter only numeric digits(0-9)");//label.setText("* Enter only numeric digits(0-9)");
//            }
//         }
//      }); 
    
    public void  setdb()
    {
        try {
     db=new DBAksess();
   //  System.out.println("user id anda adalah "+userid);
             db.setSql("select * from player WHERE user_id="+userid+"");
           // sql = "SELECT * FROM tbl_user WHERE NIP='"+Username.getText()+"' AND password='"+Password.getText()+"'";
            db.readandShow();
           if(db.getRs().next()){
               //  this.money.setText((db.getRs().getString("Money")));
               Money  =Integer.parseInt((db.getRs().getString("Money")));
              
                status=true;
          }else{
                    JOptionPane.showMessageDialog(null, "");
                }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }  
    }
    public DBAksess db,dbr;
    public boolean checker(String item_id)
    {
        boolean status=false;
        dbakses.setSql("select item_id as x from inventory where user_id ="+this.userid+" and item_id ="+item_idd.getText());//+" and x is NOT null");
        try {
            dbakses.readandShow();
            //dbakses.getRs().next();
            //if(!dbakses.getRs().getString(1).equals(null)||!dbakses.getRs().getString(1).isEmpty()||!dbakses.getRs().getString(1).isBlank())
            if(dbakses.getRs().next())
            {
                status=true;
            }
            dbakses.getCon().close();
        } catch (SQLException ex) {
            Logger.getLogger(Shop.class.getName()).log(Level.SEVERE, null, ex);
        }
        return status;
    }
    public boolean moneycheck()
    {
        boolean status=false;
        dbakses.setSql("select money from player where user_id ="+this.userid);
        try {
            dbakses.readandShow();
            dbakses.getRs().next();
            Money=dbakses.getRs().getInt(1);
            if(Money>=(Integer.parseInt(prince.getText())*Integer.parseInt(qty.getText())))
            {
                status=true;
            }
            dbakses.getCon().close();
        } catch (SQLException ex) {
            Logger.getLogger(Shop.class.getName()).log(Level.SEVERE, null, ex);
        }
        return status;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            if(x){
                if(moneycheck()){
                    dbakses.setSql("UPDATE player SET Money = money - "+(Integer.parseInt(prince.getText())*Integer.parseInt(qty.getText()))+" WHERE User_id = "+this.userid);
                    dbakses.write();
                    pl.setdb();
                    if(checker(item[table_shop.getSelectedRow()][1].toString()))
                    {
                        dbakses.setSql("UPDATE inventory SET qty = qty + "+qty.getText()+" WHERE User_id = "+this.userid+" AND item_id = "+item_idd.getText());
                        dbakses.write();
                    }else{
                        dbakses.setSql("INSERT INTO inventory (User_id,item_id,qty) VALUES ("+this.userid+","+item_idd.getText()+","+qty.getText()+")");
                        dbakses.write();
                    }
                }else
                {
                    JOptionPane.showMessageDialog(null, "Not Enough Money");
                }
            }else
            {
                JOptionPane.showMessageDialog(null, "* Enter only numeric digits(0-9)");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Shop.class.getName()).log(Level.SEVERE, null, ex);
        }
//        db=new DBAksess();
//        dbr= new DBAksess();
//        try {
//            db=new DBAksess();
//            db.setSql("select * from inventory WHERE User_id='"+coba.getText()+"' AND item_id='"+item_idd.getText()+"'");
//            db.readandShow();
//            if(db.getRs().next()){
//                if(coba.getText().equals(db.getRs().getString("User_id")) && item_idd.getText().equals(db.getRs().getString("item_id")) ){
//                    int qty1=Integer.parseInt(myqty.getText());
//                    int qty2 = Integer.parseInt(qty.getText());
//                    int Hasil = qty1+qty2;
//                    if( Hasil >= 100)
//                    {
//                        JOptionPane.showMessageDialog(null, "Melebihi Kapasitas item , Max 100");
//                    }
//                    else
//                    {     
//                        int Money1=Integer.parseInt(prince.getText());
//                        int Money2 = Integer.parseInt(qty.getText());
//                        int hasil = Money1 * Money2;
//                        System.out.println(Money);
//                        if (Money <= hasil)
//                        {
//                            JOptionPane.showMessageDialog(null, "Not Enough Money");
//                        }else
//                        {
//                            db.setSql("UPDATE inventory SET qty = qty + ("+qty.getText()+") WHERE User_id = ("+coba.getText()+") AND item_id = ("+item_idd.getText()+") ");
//                            db.write();   
//                            db.setSql("UPDATE player SET Money = money - ( ("+prince.getText()+")*("+qty.getText()+") ) WHERE User_id = ("+coba.getText()+") ");
//                            db.write();
//                            JOptionPane.showMessageDialog(null, "Succesfully");
//                            pl.setdb();
//                            getPartyList();
//                        }
//                    }
//                }
//              //  status=true;
//            }else
//            {
//                JOptionPane.showMessageDialog(null, "Data berhasil di input");
//                db.setSql("INSERT INTO inventory (User_id,item_id,qty) VALUES ('"+coba.getText()+"','"+item_idd.getText()+"','"+qty.getText()+"')");
//                db.write();
//                JOptionPane.showMessageDialog(null, "Succesfully");
//            }
//        } catch (Exception ex) {
//            Logger.getLogger(Shop.class.getName()).log(Level.SEVERE, null, ex);
//            System.out.println(ex);
//            ex.getCause();
//        }      
         
            
    }//GEN-LAST:event_jButton2ActionPerformed

    private void qtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyTyped
        qty.addKeyListener(new KeyAdapter() {
         public void keyPressed(KeyEvent ke) {
            String value = qty.getText();
            int l = value.length();
            //if (ke.getKeyChar() >= '0' && ke.getKeyChar() <= '9') {
            if (ke.getKeyChar() >= '0' && ke.getKeyChar() <= '9') {
               x=true;
               System.out.println("anjing"); 
            } else {
                System.out.println("babi"); 
               x=false;
            }
         }
      });
    }//GEN-LAST:event_qtyKeyTyped

    private void qtyFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qtyFocusGained
        if(qty.getText().equals("0")){
            qty.setText("");
        }
    }//GEN-LAST:event_qtyFocusGained

    private void qtyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_qtyFocusLost
        if(qty.getText().equals("")){
            qty.setText("0");
        }
    }//GEN-LAST:event_qtyFocusLost

   
    public void getPartyList() {
        try {
            //System.out.println(userid);
          //  String cobamanggis= coba.getText();
            table_shop.setModel(dbakses.getItemData());
            table_shop.getColumnModel().getColumn(0).setWidth(0);
            table_shop.getColumnModel().getColumn(0).setMinWidth(0);
            table_shop.getColumnModel().getColumn(0).setMaxWidth(0); 
            
            table_shop.getColumnModel().getColumn(2).setWidth(0);
            table_shop.getColumnModel().getColumn(2).setMinWidth(0);
            table_shop.getColumnModel().getColumn(2).setMaxWidth(0);
            
            
            for (int i = 2; i < table_shop.getModel().getColumnCount(); i++) {
                
                
                table_shop.getColumnModel().getColumn(i).setWidth(0);
                table_shop.getColumnModel().getColumn(i).setMinWidth(0);
                table_shop.getColumnModel().getColumn(i).setMaxWidth(0);
            }
      selectedParty = new String[table_shop.getModel().getColumnCount()];
        if(table_shop.getRowCount()<=0){
            
        }else
        {
            table_shop.setRowSelectionInterval(0, 0);
            setItem(0);
        }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error!\n" + e, "Error", ERROR);
        }
    }
 

  private void setItem(int selRow){
        //int item_id=Integer.valueOf(item[table_shop.getSelectedRow()][1].toString());//int item_id = (int) table_shop.getValueAt(selRow, 0);
        item_idd.setText(String.valueOf(item[table_shop.getSelectedRow()][0].toString()));//item_idd.setText(table_shop.getValueAt(selRow, 0).toString());
      nama.setText(String.valueOf(item[table_shop.getSelectedRow()][1].toString()));//nama.setText(table_shop.getValueAt(selRow, 1).toString());
      prince.setText(String.valueOf(item[table_shop.getSelectedRow()][4].toString()));//prince.setText(table_shop.getValueAt(selRow, 4).toString());  
    
        descripsi.setText(String.valueOf(item[table_shop.getSelectedRow()][5].toString()));//descripsi.setText(table_shop.getValueAt(selRow, 5).toString()); 
//        myqty.setText(table_shop.getValueAt(selRow, 6).toString()); 
//        for (int i = 0; i < table_shop.getColumnCount(); i++) {
//            selectedParty[i] = table_shop.getValueAt(selRow, i).toString();
//        }
     
        jLabel5.setIcon(new ImageIcon(this.getClass().getClassLoader().getResource("itemicon/"+item[table_shop.getSelectedRow()][0].toString()+".png")));
    }
    
    public String[] getSelectedParty(){
        return selectedParty;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Description;
    private javax.swing.JLabel coba;
    private javax.swing.JLabel coba1;
    private javax.swing.JLabel coba3;
    private javax.swing.JTextArea descripsi;
    private javax.swing.JLabel item_idd;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel myqty;
    private javax.swing.JLabel nama;
    private javax.swing.JLabel prince;
    private javax.swing.JTextField qty;
    private javax.swing.JTable table_shop;
    // End of variables declaration//GEN-END:variables
}
